{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"App Engineering Handbook","text":"<p>Dokumentasi ini adalah panduan praktis untuk menyiapkan proyek perangkat lunak modern dengan prinsip API-First, Security by Design, dan governance yang ringan namun tegas. Isi panduan ini dirancang agar relevan selama 5+ tahun dan mudah di-maintain.</p> <p>Cara menggunakan</p> <ul> <li>Mulai dari Process \u2192 Sprint-0 untuk inisiasi proyek</li> <li>Ikuti Architecture \u2192 API-First dan Auth (JWT, RBAC, MFA)</li> <li>Terapkan Checklists sebelum go-live</li> <li>Catat keputusan penting di ADR</li> </ul> <p>Repositori ini kompatibel dengan template aplikasi FastAPI/Quart/Flask yang telah kita buat (dengan Postgres + Alembic).</p>"},{"location":"00-foundations/glossary/","title":"Glossary","text":"<ul> <li>API-First: Desain dan kontrak API disepakati di depan sebelum implementasi.</li> <li>ADR: Architecture Decision Record; catatan singkat keputusan arsitektur.</li> <li>RBAC: Role-Based Access Control; kontrol akses berbasis peran.</li> <li>MFA: Multi-Factor Authentication; autentikasi dengan lebih dari satu faktor.</li> <li>SAST/DAST: Static/Dynamic Application Security Testing.</li> <li>PII: Personally Identifiable Information.</li> </ul>"},{"location":"00-foundations/overview/","title":"Overview","text":"<ul> <li>Tujuan: Menstandarkan engineering practice agar tim bisa membangun dan memelihara aplikasi dengan cepat, aman, dan terukur.</li> <li>Prinsip: API-First, Security by Design, Observability, Automasi, Reuse, dan Dokumentasi hidup.</li> <li>Cakupan: Sprint-0, arsitektur &amp; keputusan, auth (JWT/RBAC/MFA), checklists keamanan, operasi, dan governance.</li> </ul>"},{"location":"00-foundations/tenets/","title":"Tenets (Key Principles)","text":"<ol> <li>Kontrak dulu, kode kemudian (API-First).</li> <li>Security bukan fitur, melainkan baseline (JWT, RBAC, MFA, least privilege, audit).</li> <li>Automasi kualitas: lint/type/test/security di CI.</li> <li>Dokumentasi hidup: MkDocs + ADR, update per perubahan arsitektur.</li> <li>Sederhana dulu: iterasi kecil, time-boxed, hindari BDUF.</li> </ol>"},{"location":"01-process/adr-guide/","title":"ADR Guide","text":"<p>Format rekomendasi: - Judul/ID: <code>000X-title.md</code> - Tanggal dan Status (Proposed/Accepted/Deprecated/Superseded) - Konteks \u2192 Keputusan \u2192 Alternatif \u2192 Konsekuensi \u2192 Referensi</p> <p>Tips: - Satu keputusan per ADR. - Update Status bila tergantikan; tautkan <code>Superseded-by #xxxx</code>. - Tautkan ADR ke PR/Issue terkait.</p>"},{"location":"01-process/api-lifecycle/","title":"API Lifecycle (Singkat)","text":"<ol> <li>Design (OpenAPI) \u2192 2. Review (lint/spec) \u2192 3. Mock/Test \u2192 4. Implement \u2192 5. Contract Test \u2192 6. Versioning \u2192 7. Deprecation.</li> </ol>"},{"location":"01-process/sprint-0/","title":"Sprint-0 (Inisiasi)","text":""},{"location":"01-process/sprint-0/#deliverables-minimum","title":"Deliverables (minimum)","text":"<ul> <li>Tujuan &amp; Scope: 3\u20135 tujuan, 5\u201310 user story prioritas, NFR sederhana.</li> <li>ADR kunci: stack, DB, strategi auth, logging.</li> <li>ERD v0: entitas inti (User, Role, Permission, domain Anda).</li> <li>API kontrak v0: endpoint prioritas (OpenAPI).</li> <li>Security baseline: JWT + RBAC + MFA rencana.</li> <li>Scaffolding: repo + CI + pre-commit + template app.</li> </ul>"},{"location":"01-process/sprint-0/#time-box-23-hari-efektif","title":"Time-box (2\u20133 hari efektif)","text":""},{"location":"01-process/sprint-0/#alur-kerja","title":"Alur Kerja","text":"<ol> <li>Tulis ADR-0001 (rekam keputusan arsitektur).</li> <li>Sketsa ERD v0 (User/Role/Permission/\u2026).</li> <li>Definisikan OpenAPI v0 untuk endpoint awal.</li> <li>Tentukan JWT claims, RBAC model, MFA strategi (ADR).</li> <li>Siapkan template app dan CI.</li> </ol>"},{"location":"02-architecture/api-first/","title":"API-First","text":""},{"location":"02-architecture/api-first/#prinsip","title":"Prinsip","text":"<ul> <li>Desain kontrak dulu (OpenAPI), implementasi menyusul.</li> <li>Kontrak diverifikasi otomatis (linting schema, contract test).</li> <li>Versioning dan deprecation jelas.</li> </ul>"},{"location":"02-architecture/api-first/#langkah-praktis","title":"Langkah Praktis","text":"<ol> <li>Buat <code>examples/openapi.yaml</code> minimal: auth, users, domain.</li> <li>Terapkan OpenAPI style guide (lihat Guides \u2192 OpenAPI Style Guide).</li> <li>Review via PR + CI (lint spec, broken links).</li> </ol> <pre><code># Potongan OpenAPI v0\nopenapi: 3.1.0\ninfo: { title: \"My API\", version: \"0.1.0\" }\ncomponents:\n  securitySchemes:\n    bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT }\npaths:\n  /healthz:\n    get: { responses: { \"200\": { description: \"OK\" } } }\nsecurity: [ { bearerAuth: [] } ]\n</code></pre>"},{"location":"02-architecture/security-baseline/","title":"Security Baseline","text":"<ul> <li>Transport: HTTPS-only, HSTS, modern TLS, no weak ciphers.</li> <li>AuthN: JWT Access+Refresh (short-lived), MFA untuk aksi sensitif.</li> <li>AuthZ: RBAC dengan prinsip least privilege.</li> <li>Secrets: secret manager (bukan .env di repo).</li> <li>Data: enkripsi at-rest &amp; in-transit; klasifikasi data; retensi minimal.</li> <li>Hardening: header keamanan, rate limit, input validation, output encoding.</li> <li>Observability: audit log, metric authz, alert untuk anomali.</li> <li>Supply Chain: lock deps, audit, SBOM (opsional).</li> <li>SDLC: SAST/DAST terotomasi; security gate di CI untuk rilis.</li> </ul>"},{"location":"02-architecture/auth/jwt/","title":"JWT (JSON Web Token)","text":""},{"location":"02-architecture/auth/jwt/#rekomendasi","title":"Rekomendasi","text":"<ul> <li>Access token: 5\u201315 menit, Refresh token: 7\u201330 hari.</li> <li>Claims minimal: <code>sub</code>, <code>exp</code>, <code>iat</code>, <code>jti</code>, <code>scope</code>/<code>permissions</code>.</li> <li>Algoritma: asimetris (RS256/ES256) bila memungkinkan.</li> <li>Rotasi refresh token dan deteksi reuse.</li> <li>Audience spesifik layanan.</li> <li>Revocation: simpan denylist <code>jti</code> untuk kasus khusus.</li> </ul>"},{"location":"02-architecture/auth/jwt/#implementasi-konsep","title":"Implementasi (konsep)","text":"<pre><code>flowchart TD\nA[Login] --&gt; B[Verifikasi kredensial]\nB --&gt; C[Issue Access + Refresh]\nC --&gt; D[Client simpan Refresh (httpOnly)]\nD --&gt; E[Access dipakai ke API (Bearer)]\nE --&gt; F[Expire?]\nF --Ya--&gt; G[/Refresh endpoint/] --&gt; H[Rotasi &amp; issue access baru]\n</code></pre>"},{"location":"02-architecture/auth/mfa/","title":"MFA (Multi-Factor Authentication)","text":""},{"location":"02-architecture/auth/mfa/#faktor","title":"Faktor","text":"<ul> <li>Something you know (password)</li> <li>Something you have (TOTP, WebAuthn, push)</li> <li>Something you are (biometrik)</li> </ul>"},{"location":"02-architecture/auth/mfa/#rekomendasi","title":"Rekomendasi","text":"<ul> <li>TOTP per-user, backup codes.</li> <li>WebAuthn (passkey) untuk pengalaman tanpa password.</li> <li>Enforcement MFA untuk aksi berisiko tinggi (role admin, transfer dana, ubah secret).</li> </ul>"},{"location":"02-architecture/auth/rbac/","title":"RBAC (Role-Based Access Control)","text":""},{"location":"02-architecture/auth/rbac/#model","title":"Model","text":"<ul> <li>Role mengelompokkan Permission.</li> <li>User mendapatkan 1..n Role.</li> <li>Enforcement berdasarkan <code>permission code</code> di endpoint/service.</li> </ul>"},{"location":"02-architecture/auth/rbac/#tabel-referensi-contoh","title":"Tabel Referensi (contoh)","text":"<ul> <li><code>role(slug, name)</code></li> <li><code>permission(code, description)</code></li> <li><code>role_permission(role_id, permission_id)</code></li> <li><code>user_role(user_id, role_id)</code></li> </ul>"},{"location":"02-architecture/auth/rbac/#praktik","title":"Praktik","text":"<ul> <li>Permission granular (mis. <code>project:create</code>, <code>project:read</code>).</li> <li>Cek di middleware/dependency sebelum ke service.</li> </ul>"},{"location":"03-guides/ci-cd-security/","title":"CI/CD Security","text":"<ul> <li>SAST: jalankan lint, type check, security scan (bandit, semgrep).</li> <li>DAST: minimal untuk endpoint publik.</li> <li>Deps Audit: audit libs, lockfile, pin versi.</li> <li>Image Scan: scan image container; gunakan base minimal.</li> <li>Policy Gates: PR tak boleh merge jika check merah.</li> </ul>"},{"location":"03-guides/logging-observability/","title":"Logging &amp; Observability","text":"<ul> <li>Struktur: JSON log, korelasi <code>trace_id</code>/<code>request_id</code>.</li> <li>Level: DEBUG/INFO/WARN/ERROR/FATAL; hindari DEBUG di prod.</li> <li>Audit: event keamanan (login, permission denied, admin action).</li> <li>Metrics: p95 latency, error rate, auth failures, token refresh rate.</li> <li>Tracing: W3C Trace Context; instrumentasi auto bila ada.</li> </ul>"},{"location":"03-guides/openapi-style-guide/","title":"OpenAPI Style Guide (Ringkas)","text":"<ul> <li>Naming: <code>kebab-case</code> untuk path, <code>camelCase</code> untuk JSON fields.</li> <li>HTTP Codes: gunakan standar (200/201/204, 400/401/403/404/409, 422, 500).</li> <li>Errors: format konsisten <code>{ \"error\": { \"code\": \"...\", \"message\": \"...\" } }</code>.</li> <li>Versioning: <code>/v1/\u2026</code>, siapkan strategi deprecate.</li> <li>Pagination: <code>limit</code>, <code>offset</code> atau <code>cursor</code> + metadata.</li> </ul>"},{"location":"03-guides/secrets-management/","title":"Secrets Management","text":"<ul> <li>Simpan di Secret Manager (cloud/KMS), bukan <code>.env</code> di repo.</li> <li>Rotasi berkala; prinsip least privilege pada akses secret.</li> <li>Hindari men-log secret (masking).</li> <li>Pemisahan runtime config vs build-time.</li> </ul>"},{"location":"04-checklists/appsec-checklist/","title":"AppSec Checklist (Build &amp; Test)","text":"<ul> <li>[ ] Input validation &amp; output encoding</li> <li>[ ] HTTPS only + HSTS</li> <li>[ ] Security headers (CSP, X-Frame-Options, X-Content-Type-Options, Referrer-Policy)</li> <li>[ ] Rate limiting &amp; brute-force protection</li> <li>[ ] AuthN: JWT Access/Refresh, rotasi, audience</li> <li>[ ] AuthZ: RBAC enforcement di middleware</li> <li>[ ] Secrets: disimpan di secret manager</li> <li>[ ] Logging: JSON, audit events, PII masking</li> <li>[ ] SAST/DAST lintas CI</li> <li>[ ] Dependency &amp; container scan</li> </ul>"},{"location":"04-checklists/data-protection-checklist/","title":"Data Protection Checklist","text":"<ul> <li>[ ] Klasifikasi data &amp; pengaturan retensi</li> <li>[ ] Enkripsi at-rest &amp; in-transit</li> <li>[ ] Pseudonymization/Masking PII</li> <li>[ ] Akses berbasis peran ke data sensitif</li> <li>[ ] Audit trail untuk akses data</li> <li>[ ] Proses Right to Erasure (jika relevan)</li> </ul>"},{"location":"04-checklists/deployment-checklist/","title":"Deployment Checklist","text":"<ul> <li>[ ] Image minimal &amp; non-root user</li> <li>[ ] Read-only filesystem (jika memungkinkan)</li> <li>[ ] Resource limits &amp; liveness/readiness probes</li> <li>[ ] TLS &amp; cert rotasi</li> <li>[ ] Backup &amp; restore diuji</li> <li>[ ] Monitoring alert untuk auth/anomali</li> <li>[ ] Incident runbook terhubung</li> </ul>"},{"location":"04-checklists/pre-dev-checklist/","title":"Pre-Development Checklist (Sprint-0)","text":"<ul> <li>[ ] ADR-0001 Record Decisions</li> <li>[ ] ERD v0 (User/Role/Permission + domain inti)</li> <li>[ ] OpenAPI v0 untuk endpoint prioritas</li> <li>[ ] JWT claims, expiry, rotasi refresh</li> <li>[ ] RBAC model &amp; daftar permission awal</li> <li>[ ] MFA strategi &amp; alur enrolment</li> <li>[ ] Template app + CI + pre-commit aktif</li> <li>[ ] Security baseline terdokumentasi</li> </ul>"},{"location":"05-templates/adr-template/","title":"000X - Title","text":"<p>Tanggal: YYYY-MM-DD Status: Proposed | Accepted | Deprecated | Superseded-by #000Y</p>"},{"location":"05-templates/adr-template/#konteks","title":"Konteks","text":"<p>Latar belakang, masalah, asumsi.</p>"},{"location":"05-templates/adr-template/#keputusan","title":"Keputusan","text":"<p>Apa yang dipilih (tegas &amp; ringkas).</p>"},{"location":"05-templates/adr-template/#alternatif","title":"Alternatif","text":"<p>Opsi lain dan plus/minus.</p>"},{"location":"05-templates/adr-template/#konsekuensi","title":"Konsekuensi","text":"<p>Dampak positif/negatif, biaya migrasi.</p>"},{"location":"05-templates/adr-template/#referensi","title":"Referensi","text":"<p>Tautan/issue/PR terkait.</p>"},{"location":"05-templates/api-change-template/","title":"API Change Proposal","text":""},{"location":"05-templates/api-change-template/#ringkasan","title":"Ringkasan","text":"<ul> <li>Endpoint/kontrak yang berubah:</li> <li>Dampak ke klien:</li> </ul>"},{"location":"05-templates/api-change-template/#detail-perubahan","title":"Detail Perubahan","text":"<ul> <li>Request/Response baru:</li> <li>Deprecation &amp; migrasi:</li> </ul>"},{"location":"05-templates/api-change-template/#validasi","title":"Validasi","text":"<ul> <li>Test kontrak:</li> <li>Backward compatibility:</li> </ul>"},{"location":"05-templates/api-change-template/#rilis","title":"Rilis","text":"<ul> <li>Versioning:</li> <li>Changelog:</li> </ul>"},{"location":"05-templates/security-review-template/","title":"Security Review Template","text":""},{"location":"05-templates/security-review-template/#ringkasan-perubahan","title":"Ringkasan Perubahan","text":"<ul> <li>Fitur/komponen:</li> <li>Risiko utama:</li> <li>Lingkup data/PII:</li> </ul>"},{"location":"05-templates/security-review-template/#threat-modeling-stride-ringkas","title":"Threat Modeling (STRIDE ringkas)","text":"<ul> <li>Spoofing / Tampering / Repudiation / Information Disclosure / DoS / Elevation of Privilege</li> </ul>"},{"location":"05-templates/security-review-template/#kontrol-keamanan","title":"Kontrol Keamanan","text":"<ul> <li>AuthN/AuthZ (JWT/RBAC/MFA):</li> <li>Input/Output validation:</li> <li>Logging &amp; Audit:</li> <li>Secrets:</li> <li>TLS/Headers:</li> <li>Rate limiting:</li> </ul>"},{"location":"05-templates/security-review-template/#hasil-aksi","title":"Hasil &amp; Aksi","text":"<ul> <li>Temuan:</li> <li>Perbaikan di-commit pada:</li> </ul>"},{"location":"05-templates/threat-model-template/","title":"Threat Model","text":""},{"location":"05-templates/threat-model-template/#aset-permukaan-serangan","title":"Aset &amp; Permukaan Serangan","text":"<ul> <li>Aset kritikal:</li> <li>Endpoints/ports:</li> <li>Data sensitif:</li> </ul>"},{"location":"05-templates/threat-model-template/#aktor-skenario","title":"Aktor &amp; Skenario","text":"<ul> <li>Aktor:</li> <li>Skenario serangan:</li> </ul>"},{"location":"05-templates/threat-model-template/#mitigasi","title":"Mitigasi","text":"<ul> <li>Kontrol pencegahan:</li> <li>Deteksi &amp; respon:</li> </ul>"},{"location":"05-templates/threat-model-template/#risiko-residual","title":"Risiko Residual","text":"<ul> <li>Penilaian:</li> <li>Rencana tindak lanjut:</li> </ul>"},{"location":"07-ops/backup-restore/","title":"Backup &amp; Restore","text":"<ul> <li>Jadwal backup, retensi, enkripsi backup.</li> <li>Uji restore berkala (tabletop + drill).</li> <li>Dokumentasikan RPO/RTO.</li> </ul>"},{"location":"07-ops/incident-response-runbook/","title":"Incident Response Runbook","text":"<ol> <li>Deteksi: triase alert, identifikasi scope &amp; dampak.</li> <li>Containment: blokir token, rate limit, isolasi layanan.</li> <li>Eradikasi: patch, rotasi secret, perbaikan konfigurasi.</li> <li>Pemulihan: kembalikan layanan; pantau anomali.</li> <li>Postmortem: RCA, aksi pencegahan, update ADR/policy.</li> </ol>"},{"location":"08-governance/code-of-conduct/","title":"Code of Conduct","text":"<p>Bersikap profesional, inklusif, dan saling menghormati. Pelanggaran dapat dilaporkan ke maintainer proyek.</p>"},{"location":"08-governance/contributing/","title":"Contributing Guide","text":"<ul> <li>Gunakan Conventional Commits.</li> <li>Semua perubahan arsitektur \u2192 ADR.</li> <li>Pastikan link docs tidak rusak dan build <code>mkdocs</code> hijau.</li> </ul>"},{"location":"08-governance/doc-maintenance/","title":"Doc Maintenance","text":"<ul> <li>Setiap perubahan arsitektur \u2192 update halaman &amp;/atau ADR.</li> <li>Lakukan link check &amp; build check di CI.</li> <li>Jadwalkan review triwulanan untuk meninjau kebijakan keamanan.</li> </ul>"},{"location":"08-governance/versioning-release/","title":"Versioning &amp; Release","text":"<ul> <li>Docs versioning (opsional) gunakan mike atau cabang <code>gh-pages</code> ber-folder versi.</li> <li>Changelog untuk policy besar; jaga kompatibilitas kebelakang pada API publik.</li> </ul>"},{"location":"adr/0001-record-architecture-decisions/","title":"0001 - Record architecture decisions","text":"<p>Tanggal: 2025-09-07 Status: Accepted</p>"},{"location":"adr/0001-record-architecture-decisions/#konteks","title":"Konteks","text":"<p>Kita butuh cara ringkas mendokumentasikan keputusan penting.</p>"},{"location":"adr/0001-record-architecture-decisions/#keputusan","title":"Keputusan","text":"<p>Menggunakan ADR (MADR-like) dengan struktur: Konteks \u2192 Keputusan \u2192 Alternatif \u2192 Konsekuensi.</p>"},{"location":"adr/0001-record-architecture-decisions/#konsekuensi","title":"Konsekuensi","text":"<ul> <li>Jejak keputusan jelas</li> <li>Memudahkan onboarding</li> </ul>"},{"location":"adr/0002-security-baseline/","title":"0002 - Security baseline","text":"<p>Tanggal: 2025-09-07 Status: Accepted</p>"},{"location":"adr/0002-security-baseline/#konteks","title":"Konteks","text":"<p>Standar keamanan minimum harus konsisten di semua layanan.</p>"},{"location":"adr/0002-security-baseline/#keputusan","title":"Keputusan","text":"<p>Menerapkan baseline (HTTPS, headers, JWT short-lived, RBAC, MFA, secrets manager, audit log, SAST/DAST di CI).</p>"},{"location":"adr/0002-security-baseline/#konsekuensi","title":"Konsekuensi","text":"<ul> <li>Risiko berkurang</li> <li>Biaya operasional meningkat sedikit (monitoring &amp; tooling)</li> </ul>"},{"location":"adr/0003-authn-jwt-rbac/","title":"0003 - AuthN via JWT + AuthZ via RBAC","text":"<p>Tanggal: 2025-09-07 Status: Accepted</p>"},{"location":"adr/0003-authn-jwt-rbac/#konteks","title":"Konteks","text":"<p>Layanan membutuhkan autentikasi &amp; otorisasi terdistribusi.</p>"},{"location":"adr/0003-authn-jwt-rbac/#keputusan","title":"Keputusan","text":"<p>Gunakan JWT (Access/Refresh) &amp; RBAC (permission granular) dengan enforcement di middleware/dependency.</p>"},{"location":"adr/0003-authn-jwt-rbac/#konsekuensi","title":"Konsekuensi","text":"<ul> <li>Kontrak antar layanan lebih jelas (claims)</li> <li>Perlu manajemen kunci &amp; rotasi token</li> </ul>"},{"location":"adr/0004-mfa-adoption/","title":"0004 - MFA adoption","text":"<p>Tanggal: 2025-09-07 Status: Accepted</p>"},{"location":"adr/0004-mfa-adoption/#konteks","title":"Konteks","text":"<p>Aksi berisiko tinggi butuh kontrol tambahan.</p>"},{"location":"adr/0004-mfa-adoption/#keputusan","title":"Keputusan","text":"<p>MFA (TOTP/WebAuthn) diwajibkan untuk role/aksi sensitif; dukung backup codes.</p>"},{"location":"adr/0004-mfa-adoption/#konsekuensi","title":"Konsekuensi","text":"<ul> <li>UX sedikit lebih kompleks</li> <li>Keamanan meningkat signifikan</li> </ul>"},{"location":"adr/0005-api-first-contract/","title":"0005 - API-First contract","text":"<p>Tanggal: 2025-09-07 Status: Accepted</p>"},{"location":"adr/0005-api-first-contract/#konteks","title":"Konteks","text":"<p>Kontrak API sering berubah tanpa dokumentasi.</p>"},{"location":"adr/0005-api-first-contract/#keputusan","title":"Keputusan","text":"<p>Kontrak ditulis &amp; dibahas lebih dulu (OpenAPI), di-review &amp; dilint di CI sebelum implementasi.</p>"},{"location":"adr/0005-api-first-contract/#konsekuensi","title":"Konsekuensi","text":"<ul> <li>Kecepatan tim meningkat saat integrasi</li> <li>Perlu disiplin proses &amp; tooling</li> </ul>"},{"location":"adr/0006-type-annotation/","title":"0006 type annotation","text":""},{"location":"adr/0006-type-annotation/#1-definisi","title":"1. Definisi","text":"<p>Type Annotation di Python adalah fitur untuk memberikan informasi tentang tipe data dari variabel, parameter fungsi, maupun nilai kembalian fungsi. Contoh sederhana:</p> <pre><code>def add(x: int, y: int) -&gt; int:\n    return x + y\n</code></pre> <p>Artinya:</p> <ul> <li>Parameter <code>x</code> bertipe <code>int</code>.</li> <li>Parameter <code>y</code> bertipe <code>int</code>.</li> <li>Fungsi mengembalikan nilai bertipe <code>int</code>.</li> </ul>"},{"location":"adr/0006-type-annotation/#2-tujuan-utama","title":"2. Tujuan Utama","text":"<ul> <li>Meningkatkan keterbacaan kode: orang lain (atau diri sendiri di masa depan) bisa langsung tahu tipe data yang diharapkan.</li> <li>Membantu debugging: IDE / linter (misalnya <code>mypy</code>, <code>pylance</code>) bisa mendeteksi kesalahan lebih cepat.</li> <li>Dokumentasi otomatis: banyak tools dokumentasi bisa men-generate dokumentasi lebih jelas dari type hints.</li> <li>Meningkatkan maintainability: memudahkan scaling project besar.</li> </ul>"},{"location":"adr/0006-type-annotation/#3-penting-dipahami","title":"3. Penting Dipahami","text":"<ul> <li>Type annotation tidak memaksa Python untuk benar-benar mengecek tipe saat runtime (Python tetap dynamically typed).</li> <li>Tetapi bisa digunakan bersama type checker (seperti <code>mypy</code>) untuk validasi statis.</li> </ul>"},{"location":"adr/0006-type-annotation/#4-contoh-penggunaan","title":"4. Contoh Penggunaan","text":""},{"location":"adr/0006-type-annotation/#variabel","title":"Variabel","text":"<pre><code>name: str = \"BencoolenTech\"\nage: int = 30\nis_active: bool = True\n</code></pre>"},{"location":"adr/0006-type-annotation/#fungsi-dengan-parameter-dan-return-type","title":"Fungsi dengan parameter dan return type","text":"<pre><code>def greet(name: str) -&gt; str:\n    return f\"Hello, {name}\"\n</code></pre>"},{"location":"adr/0006-type-annotation/#fungsi-dengan-optional","title":"Fungsi dengan Optional","text":"<pre><code>from typing import Optional\n\ndef find_user(id: int) -&gt; Optional[str]:\n    if id == 1:\n        return \"Alice\"\n    return None\n</code></pre>"},{"location":"adr/0006-type-annotation/#fungsi-dengan-list-dan-dict","title":"Fungsi dengan List dan Dict","text":"<pre><code>from typing import List, Dict\n\ndef get_scores() -&gt; List[int]:\n    return [90, 85, 88]\n\ndef get_user() -&gt; Dict[str, str]:\n    return {\"name\": \"Alice\", \"role\": \"Admin\"}\n</code></pre>"},{"location":"adr/0006-type-annotation/#class-dengan-type-annotation","title":"Class dengan Type Annotation","text":"<pre><code>class User:\n    id: int\n    name: str\n\n    def __init__(self, id: int, name: str) -&gt; None:\n        self.id = id\n        self.name = name\n</code></pre>"},{"location":"adr/0006-type-annotation/#5-kesimpulan","title":"5. Kesimpulan","text":"<p>Type annotation di Python adalah petunjuk (hint), bukan aturan wajib, untuk menunjukkan tipe data yang diharapkan. Dengan bantuan type checker, type annotation bisa membantu mencegah bug, memperjelas kontrak fungsi, dan menjaga konsistensi project besar.</p>"},{"location":"adr/0007-logging-and-user-notification/","title":"\ud83d\udcd8 Logging, Audit Trail, Debugging &amp; User Notification Policy","text":"<p>Dokumen ini menjadi panduan konsistensi antara Backend (Quart/Python) dan Frontend (UI/JS) agar aplikasi lebih mudah dikelola, dipantau, dan diaudit.</p>"},{"location":"adr/0007-logging-and-user-notification/#1-level-logging-backend-frontend","title":"1. Level Logging (Backend &amp; Frontend)","text":""},{"location":"adr/0007-logging-and-user-notification/#backend-pythonquart","title":"Backend (Python/Quart)","text":"Level Tujuan Contoh DEBUG Diagnosis rinci, detail teknis. \u201cplanner.step=3 tool=rag_retrieval duration=123ms\u201d INFO Event normal &amp; milestone. \u201cuser_login_success user_id=42\u201d WARNING Kondisi tidak ideal, ada fallback. \u201cvector_db_unavailable fallback=local_summary\u201d ERROR Gagal 1 request, proses lanjut. \u201cmcp_call_failed tool=rag_retrieval timeout=30s\u201d CRITICAL Kegagalan sistemik. \u201cdb_pool_exhausted\u201d AUDIT Aktivitas penting (immutable, compliance). \u201cconfig_push approved_by=admin device=fw-core-01\u201d"},{"location":"adr/0007-logging-and-user-notification/#frontend-ui","title":"Frontend (UI)","text":"Level Tujuan Tampilan debug Info dev (console). Hanya untuk developer. info Notifikasi umum. Toast biru, auto-close. success Operasi berhasil. Toast hijau, auto-close. warning Degradasi/fallback. Toast kuning, dengan tombol detail. error Kegagalan serius. Toast merah, persisten + tombol retry/report. silent Dicatat, tidak ditampilkan. Hanya kirim ke sink/log."},{"location":"adr/0007-logging-and-user-notification/#2-prinsip-terpusat","title":"2. Prinsip Terpusat","text":"<ul> <li>Structured Logging (JSON) di backend \u2192 memudahkan parsing.</li> <li>Correlation ID (<code>request_id</code>) dikirim dari backend \u2192 frontend &amp; log sink.</li> <li>Audit Logger terpisah dari log aplikasi.</li> <li>Sink Terpusat: Grafana Loki / ELK untuk log, Sentry untuk error, DB khusus untuk audit.</li> <li>Alerting via Slack/Email/Telegram (Grafana Alerting/Sentry).</li> </ul>"},{"location":"adr/0007-logging-and-user-notification/#3-format-standar-response-api","title":"3. Format Standar Response API","text":"<p>Semua response dari backend wajib konsisten:</p> <pre><code>{\n  \"status\": \"success|info|warning|error\",\n  \"message\": \"ringkas untuk user\",\n  \"code\": \"OPTIONAL_CODE\",\n  \"data\": {...},\n  \"request_id\": \"uuid-123\"\n}\n</code></pre> <p>Frontend cukup membaca <code>status</code> &amp; <code>message</code> \u2192 tampilkan notifikasi sesuai mapping.</p>"},{"location":"adr/0007-logging-and-user-notification/#4-audit-trail","title":"4. Audit Trail","text":"<ul> <li>Immutable, hanya append.</li> <li>PII &amp; secret disanitasi sebelum simpan.</li> <li>Akses terbatas hanya untuk admin/compliance.</li> <li>Retensi lebih panjang (\u2265 1 tahun).</li> <li>Database SQLite (lokal dev) atau PostgreSQL (prod)</li> </ul> <p>Contoh skema <code>audit_logs</code>:</p> Kolom Tipe Contoh id UUID <code>uuid-123</code> ts TIMESTAMP <code>2025-08-17T13:00:00Z</code> request_id TEXT <code>uuid-123</code> user_id TEXT <code>u-42</code> action TEXT <code>config_push</code> resource_type TEXT <code>device</code> resource_id TEXT <code>fw-core-01</code> result TEXT <code>approved</code> meta JSON <code>{\"version\":\"v1.2\"}</code>"},{"location":"adr/0007-logging-and-user-notification/#5-debugging-monitoring","title":"5. Debugging &amp; Monitoring","text":"<ul> <li>Request ID wajib di log &amp; response header.</li> <li>Error decorator global \u2192 format respons konsisten.</li> <li>Health endpoint (<code>/healthz</code>, <code>/readyz</code>).</li> <li>Feature flag DEBUG hanya untuk admin/IP tertentu.</li> <li>Tracing OTEL (opsional): Quart middleware \u2192 Tempo/Jaeger.</li> </ul>"},{"location":"adr/0007-logging-and-user-notification/#6-notifikasi-ke-user-frontend-ux","title":"6. Notifikasi ke User (Frontend UX)","text":"Status UX Policy success/info Toast \u2264 3s, auto-close warning Toast + tombol \u201cDetail\u201d error Toast merah persisten + Retry/Report long-running task Progress bar + WebSocket/Push notifikasi saat selesai"},{"location":"adr/0007-logging-and-user-notification/#7-contoh-log-json","title":"7. Contoh Log JSON","text":"<pre><code>{\n  \"ts\": \"2025-08-17T13:15:22Z\",\n  \"level\": \"WARNING\",\n  \"logger\": \"app\",\n  \"msg\": \"vector_db_unavailable\",\n  \"request_id\": \"4f6a8e5f-...\",\n  \"user_id\": \"u-123\",\n  \"route\": \"/chat\",\n  \"fallback\": \"summary_local\",\n  \"duration_ms\": 187\n}\n</code></pre>"},{"location":"adr/0007-logging-and-user-notification/#8-checklist-implementasi","title":"8. Checklist Implementasi","text":"<ul> <li>[ ] Middleware <code>request_id</code> &amp; user context di Quart.</li> <li>[ ] Helper <code>log()</code> &amp; <code>log_audit()</code> (structured JSON).</li> <li>[ ] Endpoint <code>/client-logs</code>, <code>/healthz</code>, <code>/readyz</code>.</li> <li>[ ] Standar response API.</li> <li>[ ] FE logger wrapper (<code>feLog</code>) + <code>showServerToast</code>.</li> <li>[ ] Sink terpusat (Loki/Sentry/DB Audit).</li> <li>[ ] Dashboard monitoring &amp; alerting.</li> <li>[ ] Policy sanitasi &amp; akses audit.</li> </ul>"},{"location":"adr/0008-concurrent-best-practices/","title":"\ud83d\udcd8 Dokumentasi Asynchronous, Threading, dan Hubungan dengan Workload","text":""},{"location":"adr/0008-concurrent-best-practices/#1-definisi","title":"1. Definisi","text":""},{"location":"adr/0008-concurrent-best-practices/#asynchronous-programming-async","title":"\ud83d\udd39 Asynchronous Programming (Async)","text":"<p>Gaya pemrograman non-blocking di Python:</p> <ul> <li>Program tidak menunggu satu task selesai baru lanjut.</li> <li>Task bisa dijalankan bersamaan (concurrent), terutama untuk I/O-bound (network, DB, file).</li> <li>Cocok untuk aplikasi dengan banyak koneksi (web server, chatbot, AI agent).   \ud83d\udc49 Sintaks: <code>async</code> / <code>await</code>.</li> </ul>"},{"location":"adr/0008-concurrent-best-practices/#multithreading","title":"\ud83d\udd39 Multithreading","text":"<p>Menjalankan beberapa thread dalam satu proses:</p> <ul> <li>Bagus untuk I/O-bound yang memakai library blocking (misalnya <code>requests</code>, driver DB sync).</li> <li>Terbatas oleh GIL (Global Interpreter Lock) \u2192 tidak efektif untuk CPU-bound.   \ud83d\udc49 Berguna sebagai adaptor untuk menjalankan fungsi blocking dalam aplikasi async.</li> </ul>"},{"location":"adr/0008-concurrent-best-practices/#multiprocessing","title":"\ud83d\udd39 Multiprocessing","text":"<p>Menjalankan beberapa proses Python terpisah:</p> <ul> <li>Setiap proses punya interpreter sendiri, tidak kena GIL.</li> <li>Efektif untuk CPU-bound (komputasi berat, ML training, image processing).</li> <li>Lebih berat resource karena setiap proses punya memori sendiri.</li> </ul>"},{"location":"adr/0008-concurrent-best-practices/#2-perbedaan-dengan-synchronous","title":"2. Perbedaan dengan Synchronous","text":""},{"location":"adr/0008-concurrent-best-practices/#synchronous-blocking","title":"Synchronous (blocking)","text":"<pre><code>import time\n\ndef task(name):\n    print(f\"Start {name}\")\n    time.sleep(2)  # blocking\n    print(f\"End {name}\")\n\ntask(\"A\")\ntask(\"B\")\n</code></pre> <p>\u23f3 Total waktu \u2248 4 detik (harus menunggu A selesai baru B jalan).</p>"},{"location":"adr/0008-concurrent-best-practices/#asynchronous-non-blocking","title":"Asynchronous (non-blocking)","text":"<pre><code>import asyncio\n\nasync def task(name):\n    print(f\"Start {name}\")\n    await asyncio.sleep(2)  # non-blocking\n    print(f\"End {name}\")\n\nasync def main():\n    await asyncio.gather(task(\"A\"), task(\"B\"))\n\nasyncio.run(main())\n</code></pre> <p>\u23f3 Total waktu \u2248 2 detik (A &amp; B jalan bersamaan).</p>"},{"location":"adr/0008-concurrent-best-practices/#3-konsep-utama-async","title":"3. Konsep Utama Async","text":"<ol> <li>Event Loop \u2013 pusat eksekusi coroutine (<code>asyncio.run()</code>).</li> <li>Coroutine \u2013 fungsi <code>async def</code>, hanya bisa jalan di event loop.</li> <li>await \u2013 titik di mana coroutine menunggu tanpa blocking event loop.</li> <li>Task \u2013 coroutine yang dijadwalkan (<code>asyncio.create_task()</code>).</li> </ol>"},{"location":"adr/0008-concurrent-best-practices/#4-kapan-dipakai","title":"4. Kapan Dipakai?","text":""},{"location":"adr/0008-concurrent-best-practices/#async","title":"\ud83d\udccc Async","text":"<ul> <li>Web server high-concurrency (FastAPI, Quart, aiohttp).</li> <li>Banyak panggilan API eksternal (OpenAI, Weather API).</li> <li>Database driver async (<code>asyncpg</code>, <code>aiomysql</code>).</li> <li>Streaming file/network.</li> <li>WebSocket/chat server.</li> <li>AI Agent orchestration (LLM + DB + tools paralel).</li> <li>Web scraping ribuan URL (aiohttp).</li> </ul> <p>\ud83d\udc49 Ideal untuk I/O-bound. \u274c Tidak cocok untuk CPU-bound.</p>"},{"location":"adr/0008-concurrent-best-practices/#threading","title":"\ud83d\udccc Threading","text":"<ul> <li>Cocok untuk I/O-bound dengan library blocking (misalnya <code>requests</code>, psycopg2).</li> <li>Digunakan bersama async via <code>asyncio.to_thread()</code> / <code>run_in_executor</code>.</li> <li>\u274c Tidak efektif untuk CPU-bound (tetap kena GIL).</li> </ul>"},{"location":"adr/0008-concurrent-best-practices/#multiprocessing_1","title":"\ud83d\udccc Multiprocessing","text":"<ul> <li>Cocok untuk CPU-bound (perhitungan numerik, enkripsi, image processing).</li> <li>Digabung dengan async via <code>ProcessPoolExecutor</code>.</li> <li>\u274c Tidak cocok untuk I/O kecil, karena overhead tinggi.</li> </ul>"},{"location":"adr/0008-concurrent-best-practices/#5-contoh-kombinasi","title":"5. Contoh Kombinasi","text":""},{"location":"adr/0008-concurrent-best-practices/#async-thread-untuk-library-blocking","title":"Async + Thread (untuk library blocking)","text":"<pre><code>import asyncio, requests\n\nasync def fetch_url(url):\n    return await asyncio.to_thread(lambda: requests.get(url).text)\n\nasync def main():\n    html1, html2 = await asyncio.gather(\n        fetch_url(\"https://example.com/1\"),\n        fetch_url(\"https://example.com/2\"),\n    )\n    print(len(html1), len(html2))\n\nasyncio.run(main())\n</code></pre>"},{"location":"adr/0008-concurrent-best-practices/#async-process-untuk-cpu-berat","title":"Async + Process (untuk CPU berat)","text":"<pre><code>import asyncio\nfrom concurrent.futures import ProcessPoolExecutor\n\ndef heavy_task(n):\n    return sum(i*i for i in range(n))\n\nasync def run_heavy(n):\n    loop = asyncio.get_running_loop()\n    with ProcessPoolExecutor() as pool:\n        return await loop.run_in_executor(pool, heavy_task, n)\n\nasync def main():\n    results = await asyncio.gather(run_heavy(10_000_000), run_heavy(10_000_000))\n    print(results)\n\nasyncio.run(main())\n</code></pre>"},{"location":"adr/0008-concurrent-best-practices/#6-tabel-perbandingan","title":"6. Tabel Perbandingan","text":""},{"location":"adr/0008-concurrent-best-practices/#sync-vs-async","title":"\ud83d\udd04 Sync vs Async","text":"Aspek Sync Async Eksekusi Satu per satu (blocking) Bisa jalan bersamaan (non-blocking) Waktu Tunggu I/O Menunggu selesai Task lain tetap jalan Use Case Script sederhana, CPU-bound Web server, API calls, DB, scraping Resource Lebih berat (thread/process) Hemat (event loop tunggal)"},{"location":"adr/0008-concurrent-best-practices/#thread-vs-multiprocessing","title":"\ud83d\udd04 Thread vs Multiprocessing","text":"Aspek Threading Multiprocessing Model Banyak thread dalam 1 proses Banyak proses Python terpisah GIL \u2705 Masih terikat GIL \u274c Tidak ada GIL Resource Hemat (shared memori) Lebih boros (copy interpreter) Cocok untuk I/O-bound (blocking lib) CPU-bound (komputasi berat) Integrasi Async <code>asyncio.to_thread()</code> <code>ProcessPoolExecutor</code>"},{"location":"adr/0008-concurrent-best-practices/#7-hubungan-workloadbound-dengan-async-thread-process","title":"7. Hubungan Workload/Bound dengan Async, Thread, Process","text":"Workload Bound Async Threading Multiprocessing CPU-bound \u274c Tidak efektif \u274c Tidak efektif (kena GIL) \u2705 Ideal (multi-core, lepas GIL) RAM-bound \u26a0\ufe0f Tidak relevan \u26a0\ufe0f Tidak relevan \u2705 Bisa bantu (pecah data per proses) GPU-bound \u26a0\ufe0f Hanya atur pipeline I/O \u26a0\ufe0f Tidak relevan \u2705 Kadang dipakai koordinasi CPU \u2192 GPU I/O-bound \u2705 Ideal \u2705 Berguna untuk lib blocking \u274c Tidak efisien"},{"location":"adr/0008-concurrent-best-practices/#8-kesimpulan","title":"8. Kesimpulan","text":"<ul> <li>Async \u2192 solusi utama untuk I/O-bound.</li> <li>Threading \u2192 dipakai bersama async sebagai adaptor untuk library blocking.</li> <li>Multiprocessing \u2192 solusi utama untuk CPU-bound.</li> <li>RAM-bound &amp; GPU-bound \u2192 lebih terkait hardware &amp; batching, bukan async/thread/process.</li> </ul> <p>\ud83d\udc49 Arsitektur yang direkomendasikan: Async di level aplikasi \u2192 Thread untuk adaptor library blocking \u2192 Process untuk CPU-heavy task.</p>"},{"location":"adr/0008-concurrent-best-practices/#9-decision-tree-diagram","title":"9. Decision Tree Diagram","text":"<pre><code>flowchart TD\n    A[Mulai: identifikasi beban kerja] --&gt; B{Dominan I O&lt;br&gt;jaringan, disk, database}\n    B -- Ya --&gt; C{Pustaka sudah async&lt;br&gt;aiohttp, asyncpg, aiomysql}\n    C -- Ya --&gt; D[Gunakan Asyncio murni&lt;br&gt;await semua operasi I O]\n    C -- Tidak --&gt; E[Gunakan Async + Thread adaptor&lt;br&gt;asyncio.to_thread atau run_in_executor]\n\n    B -- Tidak --&gt; F{Dominan komputasi CPU berat}\n    F -- Ya --&gt; G{Butuh skala multi core&lt;br&gt;atau handler web tetap responsif}\n    G -- Ya --&gt; H[Multiprocessing atau ProcessPoolExecutor&lt;br&gt;offload fungsi CPU bound]\n    G -- Tidak --&gt; I[Optimasi dulu: algoritma, NumPy, Numba, Cython]\n\n    F -- Tidak --&gt; J{RAM menjadi bottleneck}\n    J -- Ya --&gt; K[Batching atau chunking data&lt;br&gt;format efisien Parquet NPY&lt;br&gt;pertimbangkan tambah RAM]\n    J -- Tidak --&gt; L{Menggunakan GPU untuk inference atau training}\n    L -- Ya --&gt; M[Prioritaskan GPU dan VRAM&lt;br&gt;atur pipeline I O dengan Async opsional]\n    L -- Tidak --&gt; N[Kemungkinan campuran I O dan CPU&lt;br&gt;kombinasikan Async untuk I O dan Process untuk CPU]\n\n    %% Catatan samping\n    D -. Praktik .-&gt; D1[Gunakan driver async untuk DB dan HTTP]\n    E -. Praktik .-&gt; E1[Bungkus hanya pemanggilan blocking agar event loop tidak macet]\n    H -. Praktik .-&gt; H1[Minimalkan data antar proses&lt;br&gt;gunakan shared memory bila perlu]\n    I -. Praktik .-&gt; I1[Uji vectorization dan JIT sebelum paralel]\n    M -. Praktik .-&gt; M1[Mixed precision dan batch size seimbang]\n\n    %% Eskalasi skala\n    H --&gt; Q{Butuh skala lintas mesin atau antrean tugas}\n    Q -- Ya --&gt; R[Gunakan job queue&lt;br&gt;Celery Arq RQ dan autoscaling worker]\n    Q -- Tidak --&gt; S[Selesaikan lokal dengan pool proses]\n</code></pre>"},{"location":"adr/0008-concurrent-best-practices/#cara-pakai-cepat","title":"Cara pakai cepat","text":"<ul> <li>Jika menunggu respons jaringan atau disk \u2192 mulai dari Async.</li> <li>Jika pustaka masih sync \u2192 Async + Thread adaptor (<code>asyncio.to_thread</code> atau <code>run_in_executor</code>).</li> <li>Jika menghitung berat di CPU \u2192 Multiprocessing atau <code>ProcessPoolExecutor</code>.</li> <li>Jika data menumpuk di RAM \u2192 chunking, batching, format efisien, baru pertimbangkan tambah RAM.</li> <li>Jika pakai GPU \u2192 fokus VRAM dan throughput, Async hanya untuk mengatur alur I O.</li> </ul>"},{"location":"adr/0009-io-bound-vs-cpu-bound/","title":"0009 io bound vs cpu bound","text":""},{"location":"adr/0009-io-bound-vs-cpu-bound/#1-definisi-singkat","title":"1. Definisi Singkat","text":"<ul> <li>I/O-bound \u2192 bottleneck ada di Input/Output (menunggu respons dari luar CPU).</li> <li>CPU-bound \u2192 bottleneck ada di perhitungan berat di CPU.</li> </ul>"},{"location":"adr/0009-io-bound-vs-cpu-bound/#2-contoh-kasus-io-bound","title":"2. Contoh Kasus I/O-bound","text":"<p>Task lebih banyak menunggu daripada menghitung.</p> <ul> <li>Panggil API eksternal (misalnya OpenAI API, REST API).</li> <li>Query ke database.</li> <li>Baca/tulis file besar (PDF, log, CSV).</li> <li>Streaming data (upload/download).</li> <li>Socket/WebSocket (chat, IoT, game server).</li> </ul> <p>\ud83d\udc49 Gejala:</p> <ul> <li>CPU usage rendah (idle),</li> <li>Tapi aplikasi tetap lambat karena banyak \u201cmenunggu\u201d.</li> <li>Solusi: pakai async.</li> </ul>"},{"location":"adr/0009-io-bound-vs-cpu-bound/#3-contoh-kasus-cpu-bound","title":"3. Contoh Kasus CPU-bound","text":"<p>Task lebih banyak menghitung berat.</p> <ul> <li>Training machine learning model.</li> <li>Enkripsi/dekripsi data besar.</li> <li>Render video / kompresi file.</li> <li>Simulasi numerik atau scientific computing.</li> <li>Proses gambar (OCR, computer vision berat).</li> </ul> <p>\ud83d\udc49 Gejala:</p> <ul> <li>CPU usage tinggi (100% 1 core).</li> <li>Aplikasi lambat bukan karena menunggu, tapi karena CPU penuh kerja.</li> <li>Solusi: pakai multiprocessing / GPU / library C (numpy, torch, dll).</li> </ul>"},{"location":"adr/0009-io-bound-vs-cpu-bound/#4-cara-praktis-mengecek","title":"4. Cara Praktis Mengecek","text":"<ol> <li> <p>Monitor CPU vs Network/Disk</p> </li> <li> <p>Di Linux: <code>htop</code>, <code>iotop</code>, <code>nload</code>.</p> </li> <li>Di Windows: Task Manager \u2192 lihat CPU, Disk, Network.</li> <li>Kalau CPU rendah tapi lambat \u2192 I/O-bound.</li> <li> <p>Kalau CPU tinggi terus \u2192 CPU-bound.</p> </li> <li> <p>Profiling di Python</p> </li> <li> <p>Pakai <code>cProfile</code> untuk lihat bagian mana yang makan waktu.</p> </li> <li> <p>Pakai <code>asyncio</code> untuk test concurrency \u2192 kalau speed naik signifikan, berarti I/O-bound.</p> </li> <li> <p>Rule of Thumb</p> </li> <li> <p>Kalau banyak \"await\" (API, DB, file, network) \u2192 I/O-bound.</p> </li> <li>Kalau banyak loop matematis, for/while besar, image processing \u2192 CPU-bound.</li> </ol>"},{"location":"adr/0009-io-bound-vs-cpu-bound/#5-ilustrasi","title":"5. Ilustrasi","text":"<ul> <li>I/O-bound:</li> </ul> <pre><code>async def fetch_data(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as resp:\n            return await resp.text()\n</code></pre> <p>\u2192 Menunggu network, bukan CPU.</p> <ul> <li>CPU-bound:</li> </ul> <pre><code>def calculate_pi(n):\n    total = 0\n    for i in range(n):\n        total += ((-1) ** i) / (2*i + 1)\n    return total * 4\n</code></pre> <p>\u2192 Loop besar, CPU kerja keras.</p> <p>\u2705 Kesimpulan Singkat</p> <ul> <li>I/O-bound \u2192 banyak nunggu respons (pakai async).</li> <li>CPU-bound \u2192 banyak hitung berat (pakai multiprocessing/GPU).</li> </ul>"},{"location":"adr/0010-resource-workload/","title":"\ud83d\udcd8 Dokumentasi: Memahami Bound dalam Komputasi","text":""},{"location":"adr/0010-resource-workload/#1-apa-itu-bound","title":"\ud83d\udd39 1. Apa itu Bound?","text":"<p>Istilah bound = batasan (bottleneck). \u27a1 Artinya: bagian mana dari sistem yang jadi penghambat utama performa aplikasi.</p> <p>Kalau Anda tahu dimana bottleneck \u2192 Anda bisa tentukan resource server yang tepat.</p>"},{"location":"adr/0010-resource-workload/#2-jenis-jenis-bound","title":"\ud83d\udd39 2. Jenis-Jenis Bound","text":""},{"location":"adr/0010-resource-workload/#cpu-bound","title":"\ud83d\udda5\ufe0f CPU-bound","text":"<ul> <li>Definisi: bottleneck ada di prosesor (CPU).</li> <li> <p>Ciri:</p> </li> <li> <p>CPU usage tinggi (mendekati 100%).</p> </li> <li>RAM masih longgar, tapi aplikasi tetap lambat.</li> <li> <p>Contoh workload:</p> </li> <li> <p>Perhitungan numerik (AI training, simulasi ilmiah).</p> </li> <li>Kompresi/enkripsi.</li> <li>Image processing berat.</li> <li> <p>Solusi:</p> </li> <li> <p>Tambah core/CPU lebih cepat.</p> </li> <li>Optimasi algoritma.</li> <li>Offload ke GPU jika bisa paralel.</li> </ul>"},{"location":"adr/0010-resource-workload/#ram-bound","title":"\ud83d\udcbe RAM-bound","text":"<ul> <li>Definisi: bottleneck ada di memory (RAM).</li> <li> <p>Ciri:</p> </li> <li> <p>RAM penuh, proses lambat / crash.</p> </li> <li>CPU tidak penuh, tapi aplikasi tetap macet.</li> <li>Bisa terjadi swap ke disk (lebih lambat).</li> <li> <p>Contoh workload:</p> </li> <li> <p>OCR file besar multi-page.</p> </li> <li>Load dataset besar ke memory.</li> <li>In-memory database (Redis, Pandas DataFrame raksasa).</li> <li> <p>Solusi:</p> </li> <li> <p>Tambah RAM.</p> </li> <li>Proses data secara batch/chunk (jangan sekali load).</li> <li>Gunakan format data efisien (Parquet, Feather).</li> </ul>"},{"location":"adr/0010-resource-workload/#gpu-bound","title":"\ud83c\udfae GPU-bound","text":"<ul> <li>Definisi: bottleneck ada di GPU (prosesor grafis).</li> <li> <p>Ciri:</p> </li> <li> <p>GPU utilization 90\u2013100%.</p> </li> <li>CPU/RAM masih santai.</li> <li> <p>Contoh workload:</p> </li> <li> <p>Deep learning (TensorFlow, PyTorch).</p> </li> <li>Rendering video/3D.</li> <li>Computer vision real-time.</li> <li> <p>Solusi:</p> </li> <li> <p>Tambah/upgrade GPU (lebih banyak CUDA core, VRAM lebih besar).</p> </li> <li>Kurangi ukuran batch training/inference.</li> <li>Mixed precision (FP16).</li> </ul>"},{"location":"adr/0010-resource-workload/#io-bound","title":"\ud83c\udf10 I/O-bound","text":"<ul> <li>Definisi: bottleneck ada di Input/Output (disk, jaringan, API call).</li> <li> <p>Ciri:</p> </li> <li> <p>CPU/RAM rendah.</p> </li> <li>Aplikasi lambat karena menunggu respons (disk read/write, network latency).</li> <li> <p>Contoh workload:</p> </li> <li> <p>Query database lambat.</p> </li> <li>Web scraping ribuan URL.</li> <li>Download/upload file besar.</li> <li>Server API dengan banyak request.</li> <li> <p>Solusi:</p> </li> <li> <p>Gunakan async (<code>asyncio</code>, FastAPI, aiohttp).</p> </li> <li>Cache hasil query.</li> <li>Pakai SSD/NVMe (untuk disk I/O).</li> <li>Optimasi koneksi jaringan.</li> </ul>"},{"location":"adr/0010-resource-workload/#3-bagaimana-mengetahui-aplikasi-saya-bound-di-mana","title":"\ud83d\udd39 3. Bagaimana Mengetahui Aplikasi Saya Bound di Mana?","text":"<ol> <li> <p>Monitor resource server:</p> </li> <li> <p><code>htop</code> / Task Manager \u2192 lihat CPU &amp; RAM.</p> </li> <li><code>nvidia-smi</code> \u2192 lihat GPU usage.</li> <li> <p><code>iotop</code>, <code>iftop</code> \u2192 cek disk &amp; network I/O.</p> </li> <li> <p>Tanda-tanda umum:</p> </li> <li> <p>CPU 100% \u2192 CPU-bound.</p> </li> <li>RAM penuh, swap aktif \u2192 RAM-bound.</li> <li>GPU usage 100% \u2192 GPU-bound.</li> <li> <p>CPU idle, tapi program lambat menunggu data \u2192 I/O-bound.</p> </li> <li> <p>Gunakan profiler Python:</p> </li> <li> <p><code>cProfile</code> untuk cek fungsi mana yang makan waktu.</p> </li> <li>Library monitoring (Prometheus, Grafana) untuk long-term insight.</li> </ol>"},{"location":"adr/0010-resource-workload/#4-panduan-alokasi-resource-praktis","title":"\ud83d\udd39 4. Panduan Alokasi Resource (Praktis)","text":"Jenis Aplikasi Bound Utama Resource Utama yang Perlu Diperkuat Web server (API, Chatbot, AI Agent) I/O-bound Tambah koneksi (async), SSD cepat, bandwidth besar ETL pipeline, OCR dokumen besar RAM-bound Tambah RAM, proses per batch AI training (NLP/CV) GPU-bound GPU kuat (CUDA core, VRAM besar) Big data processing (Pandas, Spark) RAM + CPU RAM besar, banyak core CPU Scientific computing / simulasi CPU-bound CPU cepat, banyak core Video rendering / game engine GPU-bound GPU dengan VRAM tinggi"},{"location":"adr/0010-resource-workload/#5-intuisi-sederhana-rule-of-thumb","title":"\ud83d\udd39 5. Intuisi Sederhana (Rule of Thumb)","text":"<ul> <li>Banyak perhitungan \u2192 CPU-bound.</li> <li>Banyak data besar \u2192 RAM-bound.</li> <li>Banyak model AI / grafik \u2192 GPU-bound.</li> <li>Banyak menunggu (disk/network) \u2192 I/O-bound.</li> </ul> <p>\u2705 Dengan kerangka ini, Anda bisa lebih mudah menentukan alokasi server sesuai workload. Misalnya:</p> <ul> <li>Kalau mau bikin AI Agent presales \u2192 dominan I/O-bound (API + DB) \u2192 fokus ke async + koneksi cepat.</li> <li>Kalau mau bikin OCR pipeline PDF ratusan halaman \u2192 dominan RAM-bound \u2192 fokus ke RAM besar + batch processing.</li> <li>Kalau mau bikin training AI model \u2192 dominan GPU-bound \u2192 fokus ke GPU &amp; VRAM.</li> </ul>"},{"location":"adr/0011-prompt-template-refactor/","title":"0011 prompt template refactor","text":"<p>Peran - Anda adalah x yang berpengalaman dibidang x.</p> <p>Target Audience - Python Developer</p> <p>Ketentuan Buat perubahan code dengan ketentuan bagi menjadi: (1) prinsip, (2) perubahan kode step-by-step, (3) pola logging &amp; health-check, (4) contoh alur runtime. Tiap perubahan atau perbaikan yang anda lakukan WAJIB membuat komentar secara eksplisit dengan keyword: CHANGE, DELETE, ADD, UPDATE.</p> <p>Tugas Anda (1) x (2) y (3) z</p> <p>Jika anda belum benar-benar memahami contextnya. Bertanya terlebih dahulu sebelum menjawab. ok?</p>"},{"location":"adr/0012-quart-framework/","title":"0012 quart framework","text":"<ol> <li>gunakan QuartSchema untuk validasi Request dan Response JSON     QuartSchema juga otomatis menyediakan swagger endpoint /openapi.json dan /docs</li> </ol> <p>contoh bagaimana membuat schema: <pre><code>@dataclass\nclass TodoIn:\n    task: str\n    due: datetime | None\n\n@dataclass\nclass Todo(TodoIn):\n    id: int\n\n@app.post(\"/todos/\")\n@validate_request(TodoIn)\n@validate_response(Todo)\nasync def create_todo(data: TodoIn) -&gt; Todo:\n    return Todo(id=1, task=data.task, due=data.due)\n</code></pre></p>"},{"location":"adr/0013-structured-output/","title":"0013 structured output","text":""},{"location":"adr/0013-structured-output/#1-definisi","title":"1. Definisi","text":"<p>Structured output dengan Pydantic <code>BaseModel</code> adalah cara untuk mendefinisikan dan memvalidasi data terstruktur di Python menggunakan class yang diturunkan dari <code>pydantic.BaseModel</code>.</p> <p>Artinya:</p> <ul> <li>Kita mendefinisikan schema data (struktur, tipe, batasan).</li> <li>Setiap data yang masuk akan otomatis divalidasi &amp; dikonversi sesuai tipe.</li> <li>Output yang dihasilkan konsisten, readable, dan bisa diubah jadi JSON/dict dengan mudah.</li> </ul>"},{"location":"adr/0013-structured-output/#2-contoh-dasar","title":"2. Contoh Dasar","text":"<pre><code>from pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int\n    name: str\n    is_active: bool = True  # default value\n\n# Validasi otomatis\nuser = User(id=1, name=\"Alice\")\nprint(user.dict())\n# {'id': 1, 'name': 'Alice', 'is_active': True}\n</code></pre> <p>\ud83d\udc49 Kalau input salah tipe, Pydantic akan error:</p> <pre><code>User(id=\"one\", name=\"Alice\")\n# ValidationError: id must be int\n</code></pre>"},{"location":"adr/0013-structured-output/#3-mengapa-disebut-structured-output","title":"3. Mengapa Disebut Structured Output","text":"<p>Biasanya, kalau kita pakai LLM (misalnya OpenAI API), kita ingin model tidak asal teks bebas, tapi menghasilkan data terstruktur. Contoh: hasil parsing intent, konfigurasi network, dsb.</p> <p>Pydantic <code>BaseModel</code> memberi:</p> <ul> <li>Schema (struktur data jelas).</li> <li>Validasi (data tidak sesuai langsung error).</li> <li>Konsistensi (output bisa dijamin bentuknya).</li> </ul>"},{"location":"adr/0013-structured-output/#4-contoh-untuk-ai-agent","title":"4. Contoh untuk AI Agent","text":"<p>Misal kita mau parsing hasil LLM jadi structured data:</p> <pre><code>from pydantic import BaseModel\nfrom typing import Literal\n\nclass IntentRoute(BaseModel):\n    intent: Literal[\"configure\", \"monitor\", \"other\"]\n    confidence_score: float\n\n# Anggap LLM ngembalikan JSON\nresponse = {\"intent\": \"configure\", \"confidence_score\": 0.92}\n\nparsed = IntentRoute(**response)\nprint(parsed.intent)  # \"configure\"\nprint(parsed.dict())  # {'intent': 'configure', 'confidence_score': 0.92}\n</code></pre> <p>\ud83d\udc49 Jadi bukan teks bebas <code>\"saya rasa intent configure dengan confidence 92%\"</code>, tapi structured output: objek <code>IntentRoute</code>.</p>"},{"location":"adr/0013-structured-output/#5-keunggulan","title":"5. Keunggulan","text":"<ol> <li>Validasi ketat \u2013 salah tipe langsung error.</li> <li>Konversi otomatis \u2013 JSON \u2192 Python class \u2192 JSON lagi.</li> <li>Readable \u2013 lebih mudah di-maintain daripada dict mentah.</li> <li>Plug &amp; play \u2013 cocok dipakai di FastAPI/Quart, karena response bisa otomatis jadi JSON.</li> <li>Integrasi dengan LLM \u2013 LLM diarahkan untuk mengisi field <code>BaseModel</code>, hasilnya konsisten.</li> </ol>"},{"location":"adr/0013-structured-output/#6-ilustrasi-real-dengan-openai-api","title":"6. Ilustrasi Real (dengan OpenAI API)","text":"<pre><code>from openai import OpenAI\nfrom pydantic import BaseModel\nfrom typing import Literal\n\nclass IntentRoute(BaseModel):\n    intent: Literal[\"configure\", \"monitor\", \"other\"]\n    confidence_score: float\n\nclient = OpenAI()\n\nresp = client.beta.chat.completions.parse(\n    model=\"gpt-4o-mini\",\n    messages=[{\"role\": \"user\", \"content\": \"konfigurasi firewall\"}],\n    response_format=IntentRoute\n)\n\nprint(resp.output_parsed)  \n# IntentRoute(intent='configure', confidence_score=0.95)\n</code></pre> <p>\ud83d\udc49 LLM langsung mengembalikan hasil dalam bentuk structured Pydantic model, bukan teks bebas.</p>"},{"location":"adr/0013-structured-output/#7-kesimpulan","title":"7. Kesimpulan","text":"<ul> <li>Structured output Pydantic models = cara mendefinisikan data terstruktur dengan <code>BaseModel</code>.</li> <li>Dipakai untuk memastikan output konsisten, tervalidasi, dan mudah diproses.</li> <li>Sangat berguna untuk AI Agent, API response, dan workflow yang butuh data formal, bukan teks bebas.</li> </ul>"},{"location":"adr/0014-linux-systemd-service/","title":"0014 linux systemd service","text":"<p>Siap. Intinya: kita akan buat 2 unit systemd (server &amp; client) yang:</p> <ul> <li>Memakai Python dari venv spesifik (tanpa <code>source activate</code>).</li> <li>Membaca .env per-service via <code>EnvironmentFile</code>.</li> <li>Aman berjalan di background &amp; auto-start saat boot.</li> </ul> <p>Sebelum lanjut, quick check (boleh jawab nanti):</p> <ol> <li>Path proyek server &amp; client (mis. <code>/opt/projectwise_server</code>, <code>/opt/projectwise_client</code>)</li> <li>Lokasi venv masing-masing (default: <code>/&lt;path&gt;/.venv</code>)</li> <li>File <code>.env</code> per-service (mis. <code>/etc/projectwise/server.env</code>, <code>/etc/projectwise/client.env</code>)</li> <li>User Linux yang dipakai (disarankan non-root: <code>pwserver</code>, <code>pwclient</code>)</li> </ol> <p>Di bawah ini saya berikan template lengkap siap pakai\u2014langsung bisa jalan walau Anda belum jawab.</p>"},{"location":"adr/0014-linux-systemd-service/#1-struktur-yang-disarankan","title":"1) Struktur yang disarankan","text":"<pre><code>/opt/projectwise_server/\n  \u251c\u2500 main.py\n  \u2514\u2500 .venv/            # venv server\n/opt/projectwise_client/\n  \u251c\u2500 main.py\n  \u2514\u2500 .venv/            # venv client\n/etc/projectwise/\n  \u251c\u2500 server.env\n  \u2514\u2500 client.env\n</code></pre> <p>Kalau masih ingin pakai <code>uv run</code>, saya sertakan opsi di akhir. Namun untuk server production, paling stabil pakai interpreter venv: <code>.../.venv/bin/python main.py</code>.</p>"},{"location":"adr/0014-linux-systemd-service/#2-buat-user-permissions-opsional-tapi-direkomendasikan","title":"2) Buat user &amp; permissions (opsional tapi direkomendasikan)","text":"<pre><code>sudo useradd -r -s /usr/sbin/nologin pwserver\nsudo useradd -r -s /usr/sbin/nologin pwclient\n\nsudo chown -R pwserver:pwserver /opt/projectwise_server\nsudo chown -R pwclient:pwclient /opt/projectwise_quart\n\nsudo mkdir -p /etc/projectwise\nsudo touch /etc/projectwise/server.env /etc/projectwise/client.env\nsudo chown root:root /etc/projectwise/*.env\nsudo chmod 640 /etc/projectwise/*.env\n</code></pre>"},{"location":"adr/0014-linux-systemd-service/#3-format-env-untuk-systemd","title":"3) Format <code>.env</code> untuk systemd","text":"<p><code>EnvironmentFile</code> systemd membaca format <code>KEY=VALUE</code> (tanpa <code>export</code>). Contoh:</p> <p><code>/etc/projectwise/server.env</code></p> <pre><code>PYTHONUNBUFFERED=1\nAPP_ENV=production\nAPP_HOST=0.0.0.0\nAPP_PORT=5000\nOPENAI_API_KEY=sk-xxx\nDATABASE_URL=sqlite:////opt/projectwise_server/data/app.sqlite\n</code></pre> <p><code>/etc/projectwise/client.env</code></p> <pre><code>PYTHONUNBUFFERED=1\nAPP_ENV=production\nAPP_HOST=0.0.0.0\nAPP_PORT=8000\nMCP_URL=http://localhost:5000/projectwise/mcp/\n</code></pre> <p>Catatan:</p> <ul> <li>Hindari spasi di sekitar <code>=</code>.</li> <li>Boleh pakai kutip jika ada karakter khusus: <code>PASSWORD=\"p@ss word!\"</code>.</li> </ul>"},{"location":"adr/0014-linux-systemd-service/#4-unit-service-projectwise-server","title":"4) Unit service \u2014 ProjectWise Server","text":"<pre><code># /etc/systemd/system/projectwise-server.service\n[Unit]\nDescription=ProjectWise Server (venv + .env)\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=pwserver\nGroup=pwserver\nWorkingDirectory=/opt/projectwise_server\n\n# Deklarasi venv &amp; PATH agar pip/python dalam venv yang dipakai\nEnvironment=VIRTUAL_ENV=/opt/projectwise_server/.venv\nEnvironment=PATH=/opt/projectwise_server/.venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin\n\n# Muat variabel lingkungan service\nEnvironmentFile=/etc/projectwise/server.env\n\n# Jalankan app via interpreter venv\nExecStart=/opt/projectwise_server/.venv/bin/python main.py\n\n# Logging &amp; lifecycle\nSyslogIdentifier=projectwise-server\nStandardOutput=journal\nStandardError=journal\nRestart=on-failure\nRestartSec=5\nKillSignal=SIGINT\nTimeoutStopSec=30\n\n# Hardening opsional\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=full\nProtectHome=read-only\nRestrictSUIDSGID=true\nLockPersonality=true\nRestrictAddressFamilies=AF_UNIX AF_INET AF_INET6\n# Jika butuh tulis ke path tertentu, whitelist di bawah:\n# ReadWritePaths=/opt/projectwise_server /var/log/projectwise\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"adr/0014-linux-systemd-service/#5-unit-service-projectwise-client","title":"5) Unit service \u2014 ProjectWise Client","text":"<pre><code># /etc/systemd/system/projectwise-client.service\n[Unit]\nDescription=ProjectWise Client (venv + .env)\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=pwclient\nGroup=pwclient\nWorkingDirectory=/opt/projectwise_client\n\nEnvironment=VIRTUAL_ENV=/opt/projectwise_client/.venv\nEnvironment=PATH=/opt/projectwise_client/.venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin\n\nEnvironmentFile=/etc/projectwise/client.env\n\nExecStart=/opt/projectwise_client/.venv/bin/python main.py\n\nSyslogIdentifier=projectwise-client\nStandardOutput=journal\nStandardError=journal\nRestart=on-failure\nRestartSec=5\nKillSignal=SIGINT\nTimeoutStopSec=30\n\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=full\nProtectHome=read-only\nRestrictSUIDSGID=true\nLockPersonality=true\nRestrictAddressFamilies=AF_UNIX AF_INET AF_INET6\n# ReadWritePaths=/opt/projectwise_client /var/log/projectwise\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"adr/0014-linux-systemd-service/#6-enable-start","title":"6) Enable &amp; start","text":"<pre><code>sudo systemctl daemon-reload\nsudo systemctl enable --now projectwise-server.service\nsudo systemctl enable --now projectwise-client.service\n\n# Cek status &amp; log\nsystemctl status projectwise-server.service\nsystemctl status projectwise-client.service\njournalctl -u projectwise-server.service -f\njournalctl -u projectwise-client.service -f\n</code></pre>"},{"location":"adr/0014-linux-systemd-service/#opsi-tetap-pakai-uv-run","title":"Opsi: tetap pakai <code>uv run</code>","text":"<p>Jika Anda ingin mempertahankan <code>uv</code>:</p> <p>Server</p> <pre><code>ExecStart=/home/pwserver/.local/bin/uv run --frozen main.py\nEnvironment=PATH=/home/pwserver/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin\n</code></pre> <p>Client</p> <pre><code>ExecStart=/home/pwclient/.local/bin/uv run --frozen main.py\nEnvironment=PATH=/home/pwclient/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin\n</code></pre> <p>Pastikan <code>which uv</code> untuk masing-masing user menghasilkan path yang sama dengan <code>ExecStart</code>.</p>"},{"location":"adr/0014-linux-systemd-service/#troubleshooting-cepat","title":"Troubleshooting cepat","text":"<ul> <li><code>ExecStart</code> not found \u2192 pastikan path interpreter venv valid (<code>ls /opt/.../.venv/bin/python</code>).</li> <li>Tidak membaca .env \u2192 pastikan format <code>KEY=VALUE</code>, izin <code>640</code>, dan <code>EnvironmentFile</code> menunjuk file yang benar.</li> <li>Port bentrok \u2192 cek <code>ss -tulpn | grep :PORT</code> lalu ubah <code>APP_PORT</code> atau hentikan service lain.</li> <li>Butuh reload tanpa restart \u2192 kalau app dukung SIGHUP, bisa tambahkan <code>ExecReload=/bin/kill -HUP $MAINPID</code> (opsional).</li> </ul> <p>Kalau Anda kirim path final server &amp; client + lokasi venv + kebutuhan env kunci (mis. <code>APP_PORT</code>, <code>MCP_URL</code>, <code>DB_URL</code>), saya bisa kirimkan dua file .service &amp; dua file .env versi final siap-tempel 1:1.</p>"}]}